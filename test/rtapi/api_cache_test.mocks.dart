// Mocks generated by Mockito 5.0.9 from annotations
// in rtt/test/rtapi/api_cache_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rtt/rtapi/api.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeDateTime extends _i1.Fake implements DateTime {}

/// A class which mocks [RTAPI].
///
/// See the documentation for Mockito's code generation for more information.
class MockRTAPI extends _i1.Mock implements _i2.RTAPI {
  MockRTAPI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i2.Schedule>> getSchedule(_i2.Transport? transport,
          _i2.Station? station, _i2.Direction? direction) =>
      (super.noSuchMethod(
              Invocation.method(#getSchedule, [transport, station, direction]),
              returnValue: Future<List<_i2.Schedule>>.value(<_i2.Schedule>[]))
          as _i3.Future<List<_i2.Schedule>>);
  @override
  _i3.Future<List<_i2.Station>> getStationsOfLine(_i2.Transport? transport) =>
      (super.noSuchMethod(Invocation.method(#getStationsOfLine, [transport]),
              returnValue: Future<List<_i2.Station>>.value(<_i2.Station>[]))
          as _i3.Future<List<_i2.Station>>);
  @override
  _i3.Future<List<_i2.Station>> getStationsServedByMission(
          _i2.RERSchedule? s) =>
      (super.noSuchMethod(Invocation.method(#getStationsServedByMission, [s]),
              returnValue: Future<List<_i2.Station>>.value(<_i2.Station>[]))
          as _i3.Future<List<_i2.Station>>);
  @override
  _i3.Future<DateTime> getCurrentTime() =>
      (super.noSuchMethod(Invocation.method(#getCurrentTime, []),
              returnValue: Future<DateTime>.value(_FakeDateTime()))
          as _i3.Future<DateTime>);
  @override
  _i3.Future<bool> doesMissionStopAt(_i2.RERSchedule? s, _i2.Station? to) =>
      (super.noSuchMethod(Invocation.method(#doesMissionStopAt, [s, to]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
